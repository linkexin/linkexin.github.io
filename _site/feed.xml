<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>YUI 的严肃文</title>
    <description>一只用于承认的菜逼</description>
    <link>http://localhost:4000</link>
    
      
        <item>
          <title>基于 UIWebView 的富文本编辑器踩坑</title>
          <description>&lt;h3 id=&quot;不能设置键盘外观键盘风格回车键等&quot;&gt;不能设置键盘外观、键盘风格、回车键等&lt;/h3&gt;
&lt;p&gt;一些 textview 支持的键盘设置选项在 webview 是没法使用的，
包括: UIKeyboardType、UIKeyboardAppearance、UITextSmartInsertDeleteType 等&lt;/p&gt;

&lt;h3 id=&quot;webview-的键盘会自带一个功能条&quot;&gt;webview 的键盘会自带一个功能条&lt;/h3&gt;
&lt;p&gt;如图所示： 
&lt;img src=&quot;http://res.cloudinary.com/dp1pheuq7/image/upload/v1513184550/webview1_k2yo6k.png&quot; alt=&quot;-w250&quot; /&gt;
国内一些主流的 app 的编辑器基本上都会在键盘的上面放一个功能条，实现一些自定义的功能，再加上 webview 自带的功能条，导致编辑器在视觉上重复，体验上不够友好。
去掉自带功能条的方法可以参考：&lt;a href=&quot;https://stackoverflow.com/questions/2105858/uiwebview-keyboard-getting-rid-of-the-previous-next-done-bar&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;需要手动控制光标在可见区域内&quot;&gt;需要手动控制光标在可见区域内&lt;/h3&gt;
&lt;p&gt;在 webview 中输入文本并换行，webview 不会把光标所在位置自动滚动到可见区域，所以需要通过额外的计算来控制 webview 的滚动。
可以用 js 监听 webview 的光标位置变化事件或者文本变化事件，监听到以后获取一下光标当前在 webview 内部的位置，可以将位置坐标转换到 self.view 中，也可以将坐标直接减去 webview 的 contentOffset，也能得到光标相对于 self.view 顶部的距离。
得到光标距离 self.view 顶部的距离后，如果距离小于0，表示光标在可见区域的上方，如果距离大于 self.view 减去键盘的高度，表示光标在可见区域的下方。需要注意的是，返回的坐标是光标左上角的位置，所以判断光标是否在可见区域的下方的时候需要再加上一个光标的高度，或者也可以直接使用 line_height，这两个值不会差太多。
伪代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let caretOffset = caretY - webview.contentOffset.y
if (caretOffset &amp;lt; 0 || caretOffset &amp;gt; self.view.height - keyboardHeight + lineHeight) {
    webview.contentOffset.y += caretOffset
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;光标会默认在文本的最前面&quot;&gt;光标会默认在文本的最前面&lt;/h3&gt;
&lt;p&gt;当 webview 变成第一响应者的后，光标会默认出现在文本的最开头位置，这个交互就不太好，想要做到光标默认在文本的末尾需要在 webview 取消第一响应者的时候记录当前光标位置，在成为第一响应者的时候再将光标位置设置回去。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var focusRange;

// 记录光标位置
function backuprange() {
    var selection = window.getSelection();
    focusRange = selection.getRangeAt(0);
    focusRange.setEnd(focusRange.startContainer, focusRange.startOffset);
}

// 设置光标位置为上次记录的位置
function restorerange() {
    if (!focusRange) {
        return;
    }
    var selection = window.getSelection();
    selection.removeAllRanges();
    selection.addRange(focusRange);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;链接识别问题&quot;&gt;链接识别问题&lt;/h3&gt;
&lt;p&gt;编辑器中比较常见的场景是 @ 人或者加一个标签，并且高亮显示，这时候用 webview 就需要给这些特定的文本加标签，再给特定的标签设置css，但是如果在标签的后面紧接着输入文本，会发现文本也会被算在标签的内容里。
目前我暂时没发现修复这个问题的办法，但是可以尽量避免，比如在链接后面自动加一个空格，分割开链接和后面的文本。&lt;/p&gt;

&lt;h3 id=&quot;需要处理一些多余的标签&quot;&gt;需要处理一些多余的标签&lt;/h3&gt;
&lt;p&gt;在用 webview 实现编辑器的过程中经常发现系统会自动加一些标签，比如 div, span, br 标签，这就有可能导致一些样式上的错误。
比如编辑器有一个 placeholder，当用户把文本都删掉了，应该展示 placeholder，但是运行起来发现并不像想象的那样，原因是当用户把文本都删掉了以后文本其实并不是一个长度为0的字符串，而是 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;br&amp;gt;&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div style=\&quot;direction: inherit;\&quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/div&amp;gt;&quot;&lt;/code&gt;，所以监听文本变化的时候需要特殊处理一下这两种情况来解决这个问题。&lt;/p&gt;

&lt;h3 id=&quot;会有比较频繁的原生代码和-js-的交互&quot;&gt;会有比较频繁的原生代码和 js 的交互&lt;/h3&gt;
&lt;p&gt;这点不能算是一个坑，但是确实是在开发过程中比较费劲的一个地方。
不过好在 safari 提供了调试 webview 的工具。
在 safari 的设置中勾选上「在菜单栏中显示”开发”菜单」，打开含有 webview 的界面，在 safari 的 开发-simulator 中选择当前的 webview 就可以看 css 样式以及在 js 方法里打断点调试啦。&lt;/p&gt;

</description>
          <pubDate>2017-12-17T00:00:00+08:00</pubDate>
          <link>http://localhost:4000/notes/%E5%9F%BA%E4%BA%8E-UIWebView-%E7%9A%84%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E8%B8%A9%E5%9D%91</link>
          <guid isPermaLink="true">http://localhost:4000/notes/%E5%9F%BA%E4%BA%8E-UIWebView-%E7%9A%84%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E8%B8%A9%E5%9D%91</guid>
        </item>
      
    
      
        <item>
          <title> 系统分享 Share  extension</title>
          <description>
&lt;h2 id=&quot;说在前面&quot;&gt;说在前面&lt;/h2&gt;

&lt;p&gt;扩展（ Extension ）是 iOS 8 中引入的一个非常重要的新特性。扩展让 app 之间的数据交互成为可能。用户可以在 app 中使用其他应用提供的功能，而无需离开当前的应用。&lt;/p&gt;

&lt;p&gt;其实扩展并不是 iOS 8 才有的，在早先版本里，从 iOS5 到 iOS7，分享插件的界面设计经过了几次变更，但是功能上一直十分有限，一开始仅限于系统级和系统原生应用的内容传递。后来苹果通过与Twitter和Facebook等几家公司签订独立的协议，实现了整合的方案，使内容分享到这些应用的过程更方便。
&lt;img src=&quot;http://res.cloudinary.com/dp1pheuq7/image/upload/v1513092675/ShareExtension1_nrgune.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;基本介绍&quot;&gt;基本介绍&lt;/h2&gt;

&lt;h4 id=&quot;containing-app&quot;&gt;Containing App&lt;/h4&gt;

&lt;p&gt;扩展并不是一个独立的 app，扩展的 bundle 必须包含在一个普通应用的 bundle 的内部，这就意味着拓展不能单独存在，必须有一个包含它的 Containing App&lt;/p&gt;

&lt;h4 id=&quot;host-app&quot;&gt;Host App&lt;/h4&gt;

&lt;p&gt;扩展需要有应用来调用其运行，调用扩展的应用称为 Host App&lt;/p&gt;

&lt;h4 id=&quot;创建&quot;&gt;创建&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dp1pheuq7/image/upload/v1513092672/ShareExtension2_l8htrv.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;目录结构：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dp1pheuq7/image/upload/v1513092672/ShareExtension3_rqpmb1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;run 起来以后：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dp1pheuq7/image/upload/v1513092675/ShareExtension4_frypmo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;父类-slcomposeserviceviewcontroller&quot;&gt;父类 SLComposeServiceViewController&lt;/h4&gt;

&lt;p&gt;提供了一些方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (BOOL)isContentValid;
决定是否可以点击 Post 按钮
 
- (UIView *)loadPreviewView
加载预览视图
 
- (void)didSelectPost;
点击 Post 按钮时调用
 
- (void)didSelectCancel;
点击 Cancel 按钮时调用
 
- (NSArray *)configurationItems;
展示页下面可以点选的 item，返回一组包含 SLComposeSheetConfigurationItem 类型对象的数组
 
- (void)reloadConfigurationItems;
刷新一遍可点选的 item
 
- (void)presentationAnimationDidFinish;
展示完成时被调用，生命周期比较早，一般用来执行预加载任务
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;共享数据&quot;&gt;共享数据&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dp1pheuq7/image/upload/v1513092672/ShareExtension5_p7emjg.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dp1pheuq7/image/upload/v1513092671/ShareExtension6_yp1tjd.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;与-containing-app-共享数据&quot;&gt;与 Containing App 共享数据&lt;/h4&gt;
&lt;p&gt;通过 App Group 实现 Extension 和 Containing App 数据的共享
&lt;img src=&quot;http://res.cloudinary.com/dp1pheuq7/image/upload/v1513092673/ShareExtension7_kkowqi.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;entitlements 文件自动生成关于 App Group 的相关配置
&lt;img src=&quot;http://res.cloudinary.com/dp1pheuq7/image/upload/v1513092673/ShareExtension8_jbt2ig.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;代码实现&lt;/p&gt;

&lt;p&gt;具体的实现方式可以是：NSUserDefault、NSFileManager、CoreData&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NSUserDefault&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSUserDefaults *groupUserDefault = [[NSUserDefaults alloc] initWithSuiteName:@“group.com.zhihu.ios”];
[groupUserDefault setObject:password forKey:key];
[groupUserDefault synchronize];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;NSFileManager
通过调用 containerURLForSecurityApplicationGroupIdentifier:方法可以获得 AppGroup 的共享目录&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSURL *groupURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@“group.com.zhihu.ios”];
NSURL *fileURL = [groupURL URLByAppendingPathComponent:@&quot;demo.txt&quot;];
//写入文件
[@&quot;abc&quot; writeToURL:fileURL atomically:YES encoding:NSUTF8StringEncoding error:nil];
//读取文件
NSString *str = [NSString stringWithContentsOfURL:fileURL encoding:NSUTF8StringEncoding error:nil];
NSLog(@&quot;str = %@&quot;, str);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;CoreData&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//获取分组的共享项目
NSURL *containerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@“group.com.zhihu.ios”];
NSURL *storeURL = [containerURL URLByAppendingPathComponent:@&quot;DataModel.sqlite&quot;];
 
//初始化持久化存储调度器
NSURL *modelURL = [[NSBundle mainBundle] URLForResource:@&quot;DataModel&quot; withExtension:@&quot;momd&quot;];
 
NSManagedObjectModel *model = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL];
NSPersistentStoreCoordinator *coordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:model];
 
[coordinator addPersistentStoreWithType:NSSQLiteStoreType
configuration:nil
URL:storeURL
options:nil
error:nil];
 
//创建受控对象上下文
NSManagedObjectContext *context = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSMainQueueConcurrencyType];
 
[context performBlockAndWait:^{
[context setPersistentStoreCoordinator:coordinator];
}];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;与-host-app-共享数据&quot;&gt;与 Host App 共享数据&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/dp1pheuq7/image/upload/v1513092675/ShareExtension9_pavyco.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;代码实现&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (NSExtensionItem *item in self.extensionContext.inputItems) {
    for (NSItemProvider *itemProvider in item.attachments) {
        if ([itemProvider hasItemConformingToTypeIdentifier:(NSString *)kUTTypeURL]) {
            [itemProvider loadItemForTypeIdentifier:(NSString *)kUTTypeURL
                                            options:nil
                                  completionHandler:^(id
                                                      _Nullable item,
                                                      NSError * _Null_unspecified error) {
                                      if ([(NSObject *)item isKindOfClass:[NSURL class]]) {
                                          NSLog(@&quot;分享的URL = %@&quot;, item);
                                      }
                                  }];
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;共享-keychain-数据&quot;&gt;共享 Keychain 数据&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;开启 Keychain Group
&lt;img src=&quot;http://res.cloudinary.com/dp1pheuq7/image/upload/v1513092673/ShareExtension10_w4ccus.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;entitlements 文件自动生成关于 Keychain Group 的相关配置
&lt;img src=&quot;http://res.cloudinary.com/dp1pheuq7/image/upload/v1513092674/ShareExtension11_vgdz9b.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在构造请求参数的时候必须加上 Keychain Group&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;存：
NSMutableDictionary *query = [NSMutableDictionary new];
[query setObject:service forKey:(__bridge id)kSecAttrService];
[query setObject:account forKey:(__bridge id)kSecAttrAccount];
[query setObject:self.passwordData forKey:(__bridge id)kSecValueData];
[query setObject:keychainGroupName forKey:(__bridge id)kSecAttrAccessGroup];
SecItemAdd((__bridge CFDictionaryRef)query, NULL);
 
取：
CFTypeRef result = NULL;
NSMutableDictionary *query = [NSMutableDictionary new];
[query setObject:service forKey:(__bridge id)kSecAttrService];
[query setObject:account forKey:(__bridge id)kSecAttrAccount];
[query setObject:keychainGroupName forKey:(__bridge id)kSecAttrAccessGroup];
SecItemCopyMatching((__bridge CFDictionaryRef)query, &amp;amp;amp;result);
self.passwordData = (__bridge_transfer NSData *)result;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;注意事项&quot;&gt;注意事项&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;结束扩展程序，必须要调用&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[self.extensionContext completeRequestReturningItems:@[] completionHandler:nil];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;不要使用与主 app 信息相关的类，例如：UIApplication，不能使用的在 API 中都会用宏 NS_EXTENSION_UNAVAILABLE 标明&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;配置激活扩展的规则 NSExtensionActivationRule，默认是 TRUEPREDICATE&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSExtensionActivationSupportsAttachmentsWithMaxCount
附件最多限制，为数值类型。附件包括File、Image和Movie三大类，单一、混选总量不超过指定数量
 
NSExtensionActivationSupportsAttachmentsWithMinCount
附件最少限制，为数值类型。
 
NSExtensionActivationSupportsFileWithMaxCount
文件最多限制，为数值类型。文件泛指除Image/Movie之外的附件，例如【邮件】附件、【语音备忘录】等。
单一、混选均不超过指定数量。
 
NSExtensionActivationSupportsImageWithMaxCount
图片最多限制，为数值类型。
 
NSExtensionActivationSupportsMovieWithMaxCount
视频最多限制，为数值类型。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;或者可以使用谓词来描述&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSExtensionActivationRule
SUBQUERY (
extensionItems,
$extensionItem,
SUBQUERY (
$extensionItem.attachments,
$attachment,
(
ANY $attachment.registeredTypeIdentifiers UTI-CONFORMS-TO &quot;public.url&quot;
)
).@count &amp;amp;gt;= 1
).@count == 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
          <pubDate>2017-01-19T00:00:00+08:00</pubDate>
          <link>http://localhost:4000/notes/%E7%B3%BB%E7%BB%9F%E5%88%86%E4%BA%AB-Share-Extension</link>
          <guid isPermaLink="true">http://localhost:4000/notes/%E7%B3%BB%E7%BB%9F%E5%88%86%E4%BA%AB-Share-Extension</guid>
        </item>
      
    
  </channel>
</rss>
